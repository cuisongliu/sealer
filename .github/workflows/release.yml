on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Sealer Release

jobs:
  note:
    name: Pre note
    runs-on: ubuntu-18.04
    timeout-minutes: 5
    outputs:
      stringver: ${{ steps.contentrel.outputs.stringver }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          path: src/github.com/alibaba/sealer
      - name: Save release notes
        uses: actions/upload-artifact@v2
        with:
          name: sealer-release-notes
          path: src/github.com/alibaba/sealer/release_note.md
  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: [note]
    timeout-minutes: 10

    strategy:
      matrix:
        os: [ubuntu-18.04]

    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.3'

      - name: Set env
        shell: bash
        env:
          MOS: ${{ matrix.os }}
        run: |
          releasever=${{ github.ref }}
          releasever="${releasever#refs/tags/}"
          os=linux
          echo "GIT_TAG=${releasever}" >> $GITHUB_ENV
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "OS=${os}" >> $GITHUB_ENV
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
      - name: Checkout sealer
        uses: actions/checkout@v2
        with:
          repository: cuisongliu/sealer
          ref: ${{ github.ref }}
          path: src/github.com/alibaba/sealer

      - name: Make linux
        shell: bash
        run: |
          readonly platforms=(
            linux/amd64
            linux/arm64
          )

          for platform in "${platforms[@]}"; do
            os=${platform%/*}
            arch=${platform##*/}
            go env -w GOOS="${os}"
            go env -w GOARCH="${arch}"
            make build version=${GIT_TAG#v}
          done
        working-directory: src/github.com/alibaba/sealer

      - name: Save build binaries
        uses: actions/upload-artifact@v2
        with:
          name: sealer-binaries
          path: src/github.com/alibaba/sealer/_output/assets/*.tar.gz*


  release:
    name: Create sealer Release
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    needs: [build, note]

    steps:
      - name: Download builds and release notes
        uses: actions/download-artifact@v2
        with:
          path: builds
      - name: Catalog build assets for upload
        id: catalog
        run: |
          _filenum=1
          for i in "linux-amd64" "linux-arm64"; do
            for f in `ls builds/sealer-binaries/ | grep ${i}`; do
              echo "::set-output name=file${_filenum}::${f}"
              let "_filenum+=1"
            done
          done
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: sealer ${{ needs.check.outputs.stringver }}
          body_path: ./builds/sealer-release-notes/release_note.md
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      - name: Upload Linux sealer linux amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/sealer-binaries/${{ steps.catalog.outputs.file1 }}
          asset_name: ${{ steps.catalog.outputs.file1 }}
          asset_content_type: application/gzip
      - name: Upload Linux sealer linux amd64 sha256 sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/sealer-binaries/${{ steps.catalog.outputs.file2 }}
          asset_name: ${{ steps.catalog.outputs.file2 }}
          asset_content_type: text/plain
      - name: Upload Linux sealer linux arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/sealer-binaries/${{ steps.catalog.outputs.file3 }}
          asset_name: ${{ steps.catalog.outputs.file3 }}
          asset_content_type: application/gzip
      - name: Upload Linux sealer linux arm64 sha256 sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/sealer-binaries/${{ steps.catalog.outputs.file4 }}
          asset_name: ${{ steps.catalog.outputs.file4 }}
          asset_content_type: text/plain
